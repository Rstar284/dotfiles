#!/usr/bin/bash

#colors
c0="\033[0m"
c1="\033[1;35m"
c2="\033[1;32m"
c3="\033[1;37m"
c4="\033[1;34m"
c5="\033[1;31m"
c6="\033[1;33m"
c7="\033[1;36m"
c8="\033[1;40;30m"
c9="\033[1;43;33m"
c10="\033[1;47;37m"
c11="\033[0;90m"

# Get the init system
get_init() {
	os=$(uname -o)
	if [ "$os" = "Android" ]; then
		echo 'init.rc'
	elif pidof -q systemd; then
		echo 'systemd'
	elif [ -f '/sbin/openrc' ]; then
		echo 'openrc'
	else
		cut -d ' ' -f 1 /proc/1/comm
	fi
}

# Get count of packages installed
manager=$(which nix-env pkg yum zypper dnf rpm apt brew port pacman xbps-query emerge cave apk kiss pmm /usr/sbin/slackpkg bulge yay paru pacstall cpm pmm eopkg 2>/dev/null)
manager=${manager##*/}
case $manager in
	cpm) packages="$(cpm C)";;
	brew) packages="$(printf '%s\n' "$(brew --cellar)/"* | wc -l | tr -d '[:space:]')";;
	port) packages="$(port installed | wc -l)";;
	apt) packages="$(dpkg-query -f '${binary:Package}\n' -W | wc -l)";;
	rpm) packages="$(rpm -qa --last| wc -l)";;
	yum) packages="$(yum list installed | wc -l)";;
	dnf) packages="$(dnf list installed | wc -l)";;
	zypper) packages="$(zypper se | wc -l)";;
	pacman) packages="$(pacman -Q | wc -l)";;
	yay) packages="$(yay -Q | wc -l)";;
	paru) packages="$(paru -Q | wc -l)";;
	pacstall) packages="$(pacstall -L | wc -l)";;
	kiss) packages="$(kiss list | wc -l)";;
	emerge) packages="$(qlist -I | wc -l)";;
	pkg) packages="$(pkg info | wc -l | tr -d ' ')";;
	cave) packages="$(cave show installed-slots | wc -l)";;
	xbps-query) packages="$(xbps-query -l | wc -l)";;
	nix-env) packages="$(nix-store -q --requisites /run/current-system/sw | wc -l)";;
	apk) packages="$(apk list --installed | wc -l)";;
	pmm) packages="$(/bedrock/libexec/pmm pacman pmm -Q 2>/dev/null | wc -l )";;
	eopkg) packages="$(eopkg li | wc -l)";;
	/usr/sbin/slackpkg) packages="$(ls /var/log/packages | wc -l)";;
	bulge) packages="$(bulge list | wc -l)";;
	*)
		packages="$(ls /usr/bin | wc -l)"
		manager="bin";;
esac
# Get distro name
get_distro_name() {
	os=$(uname -o)
	if [ "$os" = "Android" ] ; then
		echo 'Android'
	else
		awk -F '"' '/PRETTY_NAME/ { print $2 }' /etc/os-release
	fi
}

# Get root partition space used
get_storage_info() {
  full="$(df -h --output=used,size / | sed 's/G/GB/g' | awk 'NR == 2 { print $1"/"$2 }')"
  percent=$(df --output=pcent / | tail -n 1 | sed 's/ //')
  echo "$full ($percent)"
}

# Get Memory usage
get_mem() {
	free --mega | awk 'NR == 2 { print $3"/"$2" MB" }'
}

# Get uptime
get_uptime() {
  IFS=. read -r s _ </proc/uptime

  # Convert uptime into readable value.
  d="$((s / 60 / 60 / 24))"
  h="$((s / 60 / 60 % 24))"
  m="$((s / 60 % 60))"

  # Hide empty fields and make the output of uptime smaller.
  [ "$d" -eq 0 ] || UPTIME="${d}d "
  [ "$h" -eq 0 ] || UPTIME="${UPTIME}${h}h "
  [ "$m" -eq 0 ] || UPTIME="${UPTIME}${m}m "
  [  -n  "$m"  ] || UPTIME="${UPTIME}${s}s ${sp}"

  # Show system-uptime information.
  printf "${rs}%s" "${UPTIME%,\ }"

}

# Get DE/WM
# Reference: https://github.com/unixporn/robbb/blob/master/fetcher.sh
get_wm() {
	wm="${XDG_CURRENT_DESKTOP#*:}"
	[ "$wm" ] || wm="$DESKTOP_SESSION"

	# for most WMs
	[ ! "$wm" ] && [ "$DISPLAY" ] && command -v xprop >/dev/null && {
		id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK)
		id=${id##* }
		wm=$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t | grep '^_NET_WM_NAME' | cut -d\" -f 2)
	}

	# for non-EWMH WMs
	[ ! "$wm" ] || [ "$wm" = "LG3D" ] &&
		wm=$(ps -e | grep -m 1 -o \
			-e "sway" \
			-e "kiwmi" \
			-e "wayfire" \
			-e "sowm" \
			-e "catwm" \
			-e "fvwm" \
			-e "dwm" \
			-e "2bwm" \
			-e "monsterwm" \
			-e "tinywm" \
			-e "xmonad")
	echo ${wm:-unknown}
}


os=$(uname -s)
    case $os in
        Linux)
            if [[ -d /system/app/ && -d /system/priv-app ]]; then
                model="$(getprop ro.product.brand) $(getprop ro.product.model)"

            elif [[ -f /sys/devices/virtual/dmi/id/product_name ||
                    -f /sys/devices/virtual/dmi/id/product_version ]]; then
                model=$(< /sys/devices/virtual/dmi/id/product_name)
                model+=" $(< /sys/devices/virtual/dmi/id/product_version)"

            elif [[ -f /sys/devices/virtual/dmi/id/board_vendor ||
                    -f /sys/devices/virtual/dmi/id/board_name ]]; then
                model=$(< /sys/devices/virtual/dmi/id/board_vendor)
                model+=" $(< /sys/devices/virtual/dmi/id/board_name)"

            elif [[ -f /sys/firmware/devicetree/base/model ]]; then
                model=$(< /sys/firmware/devicetree/base/model)

            elif [[ -f /tmp/sysinfo/model ]]; then
                model=$(< /tmp/sysinfo/model)
            fi
        ;;
      *)
        printf '%s\n' "'$os' is a unknown OS, aborting...">&2
        exit 1
        ;;
    esac

    # Remove dummy OEM info.
    model=${model//To be filled by O.E.M.}
    model=${model//To Be Filled*}
    model=${model//OEM*}
    model=${model//Not Applicable}
    model=${model//System Product Name}
    model=${model//System Version}
    model=${model//Undefined}
    model=${model//Default string}
    model=${model//Not Specified}
    model=${model//Type1ProductConfigId}
    model=${model//INVALID}
    model=${model//All Series}
    model=${model//�}

    case $model in
        "Standard PC"*) model="KVM/QEMU (${model})" ;;
        OpenBSD*)       model="vmm ($model)" ;;
    esac

echo "               "
echo -e "             ╔════════${c4}${USER}@${HOSTNAME}${c3}═══╗ "
echo -e "             ║"
echo -e "             ║ ${c7}host${c3}   ${model} "
echo -e "     ${c3}•${c8}_${c3}•${c0}     ║ ${c1}os${c3}     $(get_distro_name) $(uname -m)"
echo -e "     ${c8}${c0}${c9}oo${c0}${c8}|${c0}     ║ ${c2}kern${c3}   $(uname -r)"
echo -e "    ${c8}/${c0}${c10} ${c0}${c8}'\'${c0}    ║ ${c7}pkgs${c3}   ${packages}"
echo -e "   ${c9}(${c0}${c8}\_;/${c0}${c9})${c0}    ║ ${c4}shell${c3}  ${SHELL##*/}"
echo -e "             ║ ${c5}term${c3}   ${TERM##*/}"
echo -e "${c11}     __${c0}      ║ ${c6}init${c3}   $(get_init)"
echo -e "${c11}    (${c3}.. ${c11}\ ${c0}   ║ ${c1}wm${c3}     $(get_wm)"
echo -e "${c11}    (${c6}<> ${c11}|${c0}    ║ ${c2}mem${c3}    $(get_mem)"
echo -e "${c11}   /${c3}/  \\ ${c11}\\ ${c0}  ║ ${c7}disk${c3}   $(get_storage_info)"
echo -e "${c11}  ( ${c3}|  | ${c11}/|${c0}  ║ ${c4}uptime${c3} $(get_uptime)"
echo -e "${c6} _${c11}/\\\\${c3}(__)${c11}/${c6}_${c11})${c0}  ╚══════════════════════════╝"
echo -e "${c6} \/${c11}-____${c6}\/   ${c5}███${c2}███${c6}███${c4}███${c1}███${c7}███"
echo -e "               ${c0}"
